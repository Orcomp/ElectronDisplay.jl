{"version":3,"sources":["Thumbnail.tsx","Plot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Thumbnail","index","onClick","className","Plot","plot","console","log","data","type","Vega","spec","VegaLite","src","alt","App","props","addPlot","setState","state","plots","switchTo","render","map","_","key","window","Component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAgBeA,G,MARG,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QACzB,OACE,yBAAKC,UAAU,YAAYD,QAASA,GAApC,QACQD,K,gBCiIGG,EArBF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KACb,GAAIA,EAEF,OADAC,QAAQC,IAAIF,EAAKG,MACTH,EAAKI,MACX,IAAK,OACH,OACE,kBAACC,EAAA,EAAD,CAAMC,KAAMN,EAAKG,OAErB,IAAK,YACH,OACE,kBAACI,EAAA,EAAD,CAAUD,KAAMN,EAAKG,OAEzB,IAAK,QACH,OAAO,yBAAKK,IAAKR,EAAKG,KAAMM,IAAI,SAClC,QACE,OAAO,qDAA2BT,EAAKI,MAG7C,OAAO,M,+jBCzHF,IA0CQM,EA1Cf,YACE,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KASRC,QAAU,SAACZ,GACT,EAAKa,UAAS,SAACC,GAAD,YAEPA,EAFO,CAGVC,MAAM,GAAD,mBAAMD,EAAMC,OAAZ,CAAmBf,UAdP,EAmBvBgB,SAAW,SAACpB,GACV,EAAKiB,UAAS,SAACC,GAAD,YAEPA,EAFO,CAGVlB,cAvBiB,EA4BvBqB,OAAS,kBACP,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,cACZ,EAAKgB,MAAMC,MAAMG,KAAI,SAACC,EAAGvB,GAAJ,OAAc,kBAAC,EAAD,CAAWwB,IAAKxB,EAAOA,MAAOA,EAAOC,QAAS,WAAK,EAAKmB,SAASpB,UAEvG,yBAAKE,UAAU,aACb,kBAAC,EAAD,CAAME,KAAM,EAAKc,MAAMC,MAAM,EAAKD,MAAMlB,OAAS,EAAKkB,MAAMC,MAAM,EAAKD,MAAMlB,OAAS,UAhC1F,EAAKkB,MAAQ,CACXC,MAAO,GACPnB,MAAO,GAERyB,OAAeT,QAAU,EAAKA,QAC9BS,OAAeL,SAAW,EAAKA,SAPX,EADzB,2BAAyBM,aCJLC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47000d6c.chunk.js","sourcesContent":["import React from 'react';\nimport './Thumbnail.css';\n\nexport type ThumbnailProps = {\n    index: number,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void,\n}\n\nconst Thumbnail = ({index, onClick} : ThumbnailProps) => {\n  return (\n    <div className=\"Thumbnail\" onClick={onClick}>\n      Plot {index}\n    </div>\n  );\n}\n\nexport default Thumbnail;\n","import React from 'react';\nimport { Vega, VegaLite } from 'react-vega';\n// import { VisualizationSpec } from 'vega-embed';\nimport { PlotData } from './App';\n\nexport type PlotProps = {\n    plot: PlotData | null,\n}\n\n/* Example spec:\naddPlot({type: \"vega\", data:\n    {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"width\": 500,\n  \"height\": 200,\n  \"padding\": 5,\n\n  \"signals\": [\n    {\n      \"name\": \"interpolate\",\n      \"value\": \"linear\",\n      \"bind\": {\n        \"input\": \"select\",\n        \"options\": [\n          \"basis\",\n          \"cardinal\",\n          \"catmull-rom\",\n          \"linear\",\n          \"monotone\",\n          \"natural\",\n          \"step\",\n          \"step-after\",\n          \"step-before\"\n        ]\n      }\n    }\n  ],\n\n  \"data\": [\n    {\n      \"name\": \"table\",\n      \"values\": [\n        {\"x\": 0, \"y\": 28, \"c\":0}, {\"x\": 0, \"y\": 20, \"c\":1},\n        {\"x\": 1, \"y\": 43, \"c\":0}, {\"x\": 1, \"y\": 35, \"c\":1},\n        {\"x\": 2, \"y\": 81, \"c\":0}, {\"x\": 2, \"y\": 10, \"c\":1},\n        {\"x\": 3, \"y\": 19, \"c\":0}, {\"x\": 3, \"y\": 15, \"c\":1},\n        {\"x\": 4, \"y\": 52, \"c\":0}, {\"x\": 4, \"y\": 48, \"c\":1},\n        {\"x\": 5, \"y\": 24, \"c\":0}, {\"x\": 5, \"y\": 28, \"c\":1},\n        {\"x\": 6, \"y\": 87, \"c\":0}, {\"x\": 6, \"y\": 66, \"c\":1},\n        {\"x\": 7, \"y\": 17, \"c\":0}, {\"x\": 7, \"y\": 27, \"c\":1},\n        {\"x\": 8, \"y\": 68, \"c\":0}, {\"x\": 8, \"y\": 16, \"c\":1},\n        {\"x\": 9, \"y\": 49, \"c\":0}, {\"x\": 9, \"y\": 25, \"c\":1}\n      ]\n    }\n  ],\n\n  \"scales\": [\n    {\n      \"name\": \"x\",\n      \"type\": \"point\",\n      \"range\": \"width\",\n      \"domain\": {\"data\": \"table\", \"field\": \"x\"}\n    },\n    {\n      \"name\": \"y\",\n      \"type\": \"linear\",\n      \"range\": \"height\",\n      \"nice\": true,\n      \"zero\": true,\n      \"domain\": {\"data\": \"table\", \"field\": \"y\"}\n    },\n    {\n      \"name\": \"color\",\n      \"type\": \"ordinal\",\n      \"range\": \"category\",\n      \"domain\": {\"data\": \"table\", \"field\": \"c\"}\n    }\n  ],\n\n  \"axes\": [\n    {\"orient\": \"bottom\", \"scale\": \"x\"},\n    {\"orient\": \"left\", \"scale\": \"y\"}\n  ],\n\n  \"marks\": [\n    {\n      \"type\": \"group\",\n      \"from\": {\n        \"facet\": {\n          \"name\": \"series\",\n          \"data\": \"table\",\n          \"groupby\": \"c\"\n        }\n      },\n      \"marks\": [\n        {\n          \"type\": \"line\",\n          \"from\": {\"data\": \"series\"},\n          \"encode\": {\n            \"enter\": {\n              \"x\": {\"scale\": \"x\", \"field\": \"x\"},\n              \"y\": {\"scale\": \"y\", \"field\": \"y\"},\n              \"stroke\": {\"scale\": \"color\", \"field\": \"c\"},\n              \"strokeWidth\": {\"value\": 2}\n            },\n            \"update\": {\n              \"interpolate\": {\"signal\": \"interpolate\"},\n              \"fillOpacity\": {\"value\": 1}\n            },\n            \"hover\": {\n              \"fillOpacity\": {\"value\": 0.5}\n            }\n          }\n        }\n      ]\n    }\n  ]\n}})*/\n\nconst Plot = ({plot} : PlotProps) => {\n  if (plot) {\n    console.log(plot.data);\n    switch (plot.type) {\n      case \"vega\":\n        return (\n          <Vega spec={plot.data} />\n        );\n      case \"vega-lite\":\n        return (\n          <VegaLite spec={plot.data} />\n        );\n      case \"image\":\n        return <img src={plot.data} alt=\"Plot\"></img>\n      default:\n        return <p>Unsupported plot type: {plot.type}</p>\n    }\n  }\n  return null;\n}\n\nexport default Plot;\n","import React, {Component} from 'react';\nimport Thumbnail from './Thumbnail'\nimport Plot from './Plot';\n\nimport './App.css';\n\nexport type PlotData = {\n  type: string,\n  data: any,\n}\n\ntype AppState = {\n  plots: any[],\n  index: number,\n}\n\nexport class App extends Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      plots: [],\n      index: 0\n    };\n    (window as any).addPlot = this.addPlot;\n    (window as any).switchTo = this.switchTo;\n  }\n\n  addPlot = (plot: PlotData) => {\n    this.setState((state) => (\n      {\n        ...state,\n        plots: [...state.plots, plot],\n      }\n    ));\n  }\n\n  switchTo = (index: number) => {\n    this.setState((state) => (\n      {\n        ...state,\n        index,\n      }\n    ));\n  }\n\n  render = () => (\n    <div className=\"App\">\n      <div className=\"left-panel\">\n        {this.state.plots.map((_, index) => <Thumbnail key={index} index={index} onClick={()=>{this.switchTo(index)}}  />)}\n      </div>\n      <div className=\"main-plot\">\n        <Plot plot={this.state.plots[this.state.index] ? this.state.plots[this.state.index] : null} />\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}