{"version":3,"sources":["Thumbnail.tsx","Plot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Thumbnail","index","onClick","thumbnailURL","selected","className","src","alt","Plot","plot","onThumbnailUpdate","onInvalidPlot","window","vega","type","thumbnail","view","View","parse","data","initialize","width","height","toImageURL","then","e","console","warn","Vega","spec","onError","compile","VegaLite","toString","App","props","addPlot","noSwitch","setState","state","plots","switchTo","length","switchToFunc","indexFunc","updateThumbnail","slice","copyListener","event","clipboardData","setData","encodeURI","preventDefault","deleteCurrentPlot","splice","deletePlot","keyDownListener","isComposing","keyCode","_","render","map","key","alert","document","addEventListener","this","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f951a826.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Thumbnail.css';\r\n\r\nexport type ThumbnailProps = {\r\n    index: number,\r\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void,\r\n    thumbnailURL: string | null,\r\n    selected: boolean,\r\n}\r\n\r\nconst Thumbnail = ({index, onClick, thumbnailURL, selected} : ThumbnailProps) => {\r\n  return (\r\n    <div className=\"Thumbnail\" onClick={onClick}>\r\n      <div className=\"column left\">{index + 1}</div>\r\n      <div className=\"column right\">\r\n        {thumbnailURL && <img src={thumbnailURL} className={selected ? \"thumbnail-image-selected\" : \"thumbnail-image\"} alt=\"\" />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\nimport { Vega, VegaLite } from 'react-vega';\r\nimport { vega } from 'vega-embed';\r\nimport { compile, TopLevelSpec } from 'vega-lite';\r\nimport { PlotData } from './App';\r\nimport './Plot.css';\r\n\r\nexport type PlotProps = {\r\n    plot: PlotData | null,\r\n    onThumbnailUpdate: (thumbnailURL: string) => void,\r\n    onInvalidPlot: (e: Error) => void,\r\n}\r\n\r\nconst Plot = ({plot, onThumbnailUpdate, onInvalidPlot} : PlotProps) => {\r\n  if (plot) {\r\n    // For developers: comment/uncomment the code below to hide/expose vega\r\n    (window as any).vega = vega;\r\n    switch (plot.type) {\r\n      case \"vega\":\r\n        if (!plot.thumbnail) {\r\n          // render a thumbnail if there is no thumbnail in the plot object\r\n          try {\r\n            let view = new vega.View(vega.parse(plot.data)).initialize();\r\n            if ((view.width() as any) === \"container\" || (view.height() as any) === \"container\") { // The reason that we need to cast both return values to any is that although in function types they return a number, they do return string \"container\" in the case of \"container\" width/height\r\n              view.width(1000);\r\n              view.height(500);\r\n            }\r\n            view.toImageURL(\"png\").then(onThumbnailUpdate);\r\n          } catch (e) {\r\n            console.warn(\"Error generating thumbnail for a vega plot:\", e);\r\n          }\r\n        }\r\n        return (\r\n          <Vega spec={plot.data} className=\"vega-plot\" onError={onInvalidPlot} />\r\n        );\r\n      case \"vega-lite\":\r\n        if (!plot.thumbnail) {\r\n          try {\r\n            let view = new vega.View(vega.parse(compile(plot.data as TopLevelSpec).spec)).initialize();\r\n            if ((view.width() as any) === \"container\" || (view.height() as any) === \"container\") { // The reason that we need to cast both return values to any is that although in function types they return a number, they do return string \"container\" in the case of \"container\" width/height\r\n              view.width(1000);\r\n              view.height(500);\r\n            }\r\n            view.toImageURL(\"png\").then(onThumbnailUpdate);\r\n          } catch (e) {\r\n            console.warn(\"Error generating thumbnail for a vega-lite plot:\", e);\r\n          }\r\n        }\r\n        return (\r\n          <VegaLite spec={plot.data} className=\"vegalite-plot\" onError={onInvalidPlot} />\r\n        );\r\n        \r\n      case \"image\":\r\n        if (!plot.thumbnail) {\r\n          onThumbnailUpdate(plot.data.toString());\r\n        }\r\n        return <img src={plot.data} alt=\"Plot\"></img>\r\n      default:\r\n        return <p>Unsupported plot type: {plot.type}</p>\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Plot;\r\n","import React, {Component} from 'react';\r\nimport Thumbnail from './Thumbnail'\r\nimport Plot from './Plot';\r\n\r\nimport './App.css';\r\n\r\nexport type PlotData = {\r\n  type: string,\r\n  data: any,\r\n  thumbnail: string | null,\r\n}\r\n\r\ntype AppState = {\r\n  plots: any[],\r\n  index: number,\r\n}\r\n\r\nexport class App extends Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      plots: [],\r\n      index: 0\r\n    };\r\n\r\n    // Expose addPlot and switchTo\r\n    (window as any).addPlot = this.addPlot;\r\n    (window as any).switchTo = this.switchTo;\r\n  }\r\n\r\n  addPlot = (plot: PlotData, noSwitch: Boolean = false) => {\r\n    this.setState((state) => (\r\n      {\r\n        ...state,\r\n        plots: [...state.plots, plot],\r\n      }\r\n    ));\r\n    if (!noSwitch) {\r\n      this.switchTo(this.state.plots.length - 1);\r\n    }\r\n  }\r\n\r\n  switchTo = (index: number) => {\r\n    this.setState((state) => (\r\n      {\r\n        ...state,\r\n        index,\r\n      }\r\n    ));\r\n  }\r\n\r\n  switchToFunc = (indexFunc: (oldIndex: number, state: AppState) => number) => {\r\n    this.setState((state) => {\r\n        let index = indexFunc(state.index, state);\r\n        if (index < 0 || index > this.state.plots.length - 1) { // do not switch if it causes out of bounds\r\n          return state;\r\n        } else {\r\n          return {\r\n            ...state,\r\n            index,\r\n          };\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  updateThumbnail = (index:number, thumbnailURL:string) => {\r\n    this.setState((state) => {\r\n      let plots = this.state.plots.slice();\r\n      plots[index].thumbnail = thumbnailURL;\r\n      \r\n      return {\r\n        ...state,\r\n        plots: plots,\r\n      }\r\n    });\r\n  }\r\n\r\n  copyListener = (event: ClipboardEvent) => {\r\n    if (event.clipboardData) {\r\n      event.clipboardData.setData('text/html', '<img src=\"' + encodeURI(this.state.plots[this.state.index].thumbnail) + '\" />');\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  deleteCurrentPlot = () => {\r\n    this.setState((state) => {\r\n      let plots = state.plots.slice();\r\n      let index = state.index;\r\n      plots.splice(state.index, 1);\r\n      if (!plots[state.index]) {\r\n        if (plots.length === 0) {\r\n          index = 0;\r\n        } else {\r\n          index = plots.length - 1;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        index,\r\n        plots,\r\n      };\r\n    });\r\n  };\r\n\r\n  deletePlot = (index: number) => {\r\n    // we delete the invalid plot\r\n    this.setState((state) => {\r\n      let plots = state.plots.slice();\r\n      plots.splice(index, 1);\r\n      if (!plots[state.index]) {\r\n        if (plots.length === 0) {\r\n          index = 0;\r\n        } else {\r\n          index = plots.length - 1;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        index,\r\n        plots,\r\n      };\r\n    });\r\n  };\r\n\r\n  keyDownListener = (event: KeyboardEvent) => {\r\n    if (event.isComposing || event.keyCode === 229) {\r\n      return;\r\n    }\r\n    \r\n    if (event.keyCode === 40 || event.keyCode === 39) {\r\n      // arrow down/right\r\n      \r\n      // Note that we cannot call switchTo since we are getting old index and writing the index back\r\n      this.switchToFunc((index) => (index + 1));\r\n    } else if (event.keyCode === 38 || event.keyCode === 37) {\r\n      // arrow up/left\r\n      this.switchToFunc((index) => (index - 1));\r\n    } else if (event.keyCode === 36) {\r\n      // home\r\n      this.switchTo(0);\r\n    } else if (event.keyCode === 35) {\r\n      // end\r\n      this.switchToFunc((_, state) => (state.plots.length - 1));\r\n    } else if (event.keyCode === 8 || event.keyCode === 46) {\r\n      // backspace/delete\r\n      this.deleteCurrentPlot();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('copy', this.copyListener);\r\n    document.addEventListener('keydown', this.keyDownListener);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('copy', this.copyListener);\r\n    document.removeEventListener('keydown', this.keyDownListener);\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"App\">\r\n      <div className=\"left-panel\">\r\n        {this.state.plots.map((_, index) => <Thumbnail key={index} index={index} thumbnailURL={this.state.plots[index].thumbnail} onClick={()=>{this.switchTo(index)}} selected={index===this.state.index} />)}\r\n      </div>\r\n      <div className=\"main-plot\">\r\n        <Plot\r\n          plot={this.state.plots[this.state.index] ? this.state.plots[this.state.index] : null}\r\n          onThumbnailUpdate={(thumbnailURL) => this.updateThumbnail(this.state.index, thumbnailURL)}\r\n          onInvalidPlot={(e: Error) => {\r\n            alert(\"We encountered the following error while displaying plot \" + (this.state.index + 1) + \": \" + e.toString());\r\n            this.deletePlot(this.state.index);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}