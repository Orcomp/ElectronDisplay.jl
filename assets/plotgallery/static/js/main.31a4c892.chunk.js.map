{"version":3,"sources":["Thumbnail.tsx","Plot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Thumbnail","index","onClick","thumbnailURL","className","src","alt","Plot","plot","onThumbnailUpdate","window","vega","type","thumbnail","View","parse","data","initialize","toCanvas","then","canvas","toDataURL","Vega","spec","compile","VegaLite","toString","App","props","addPlot","noSwitch","setState","state","plots","switchTo","length","updateThumbnail","slice","render","map","_","key","Component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAkBeA,G,MATG,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,aAClC,OACE,yBAAKC,UAAU,YAAYF,QAASA,GAClC,mCAASD,EAAQ,GAChBE,GAAgB,yBAAKE,IAAKF,EAAcC,UAAU,kBAAkBE,IAAI,Q,gCCqChEC,EArCF,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,kBACnB,GAAID,EAGF,OADCE,OAAeC,KAAOA,IACfH,EAAKI,MACX,IAAK,OAOH,OANKJ,EAAKK,WAER,IAAIF,IAAKG,KAAKH,IAAKI,MAAMP,EAAKQ,OAAOC,aAAaC,WAAWC,MAAK,SAAAC,GAAM,OACrEX,EAAkBW,EAAOC,gBAI5B,kBAACC,EAAA,EAAD,CAAMC,KAAMf,EAAKQ,KAAMZ,UAAU,cAErC,IAAK,YAMH,OALKI,EAAKK,WACR,IAAIF,IAAKG,KAAKH,IAAKI,MAAMS,kBAAQhB,EAAKQ,MAAsBO,OAAON,aAAaC,WAAWC,MAAK,SAAAC,GAAM,OACnGX,EAAkBW,EAAOC,gBAI5B,kBAACI,EAAA,EAAD,CAAUF,KAAMf,EAAKQ,KAAMZ,UAAU,kBAGzC,IAAK,QAIH,OAHKI,EAAKK,YACRL,EAAKK,UAAYL,EAAKQ,KAAKU,YAEtB,yBAAKrB,IAAKG,EAAKQ,KAAMV,IAAI,SAClC,QACE,OAAO,qDAA2BE,EAAKI,MAG7C,OAAO,M,+jBC9BF,IAwDQe,EAxDf,YACE,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KASRC,QAAU,SAACrB,GAA+C,IAA/BsB,EAA8B,wDACvD,EAAKC,UAAS,SAACC,GAAD,YAEPA,EAFO,CAGVC,MAAM,GAAD,mBAAMD,EAAMC,OAAZ,CAAmBzB,SAGvBsB,GACH,EAAKI,SAAS,EAAKF,MAAMC,MAAME,OAAS,IAlBrB,EAsBvBD,SAAW,SAACjC,GACV,EAAK8B,UAAS,SAACC,GAAD,YAEPA,EAFO,CAGV/B,cA1BiB,EA+BvBmC,gBAAkB,SAACnC,EAAcE,GAC/B,IAAI8B,EAAQ,EAAKD,MAAMC,MAAMI,QAC7BJ,EAAMhC,GAAOY,UAAYV,EACzB,EAAK4B,UAAS,SAACC,GAAD,YAEPA,EAFO,CAGVC,MAAOA,QArCU,EA0CvBK,OAAS,kBACP,yBAAKlC,UAAU,OACb,yBAAKA,UAAU,cACZ,EAAK4B,MAAMC,MAAMM,KAAI,SAACC,EAAGvC,GAAJ,OAAc,kBAAC,EAAD,CAAWwC,IAAKxC,EAAOA,MAAOA,EAAOE,aAAc,EAAK6B,MAAMC,MAAMhC,GAAOY,UAAWX,QAAS,WAAK,EAAKgC,SAASjC,UAExJ,yBAAKG,UAAU,aACb,kBAAC,EAAD,CAAMI,KAAM,EAAKwB,MAAMC,MAAM,EAAKD,MAAM/B,OAAS,EAAK+B,MAAMC,MAAM,EAAKD,MAAM/B,OAAS,KAAMQ,kBAAmB,SAACN,GAAD,OAAkB,EAAKiC,gBAAgB,EAAKJ,MAAM/B,MAAOE,SA9C5K,EAAK6B,MAAQ,CACXC,MAAO,GACPhC,MAAO,GAERS,OAAemB,QAAU,EAAKA,QAC9BnB,OAAewB,SAAW,EAAKA,SAPX,EADzB,2BAAyBQ,aCLLC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.31a4c892.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Thumbnail.css';\r\n\r\nexport type ThumbnailProps = {\r\n    index: number,\r\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void,\r\n    thumbnailURL: string | null,\r\n}\r\n\r\nconst Thumbnail = ({index, onClick, thumbnailURL} : ThumbnailProps) => {\r\n  return (\r\n    <div className=\"Thumbnail\" onClick={onClick}>\r\n      <p>Plot {index + 1}</p>\r\n      {thumbnailURL && <img src={thumbnailURL} className=\"thumbnail-image\" alt=\"\" />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\nimport { Vega, VegaLite } from 'react-vega';\r\n// import { VisualizationSpec } from 'vega-embed';\r\nimport { vega } from 'vega-embed';\r\nimport { compile, TopLevelSpec } from 'vega-lite';\r\nimport { PlotData } from './App';\r\n\r\n\r\nexport type PlotProps = {\r\n    plot: PlotData | null,\r\n    onThumbnailUpdate: (thumbnailURL:string) => void\r\n}\r\n\r\nconst Plot = ({plot, onThumbnailUpdate} : PlotProps) => {\r\n  if (plot) {\r\n    // For developers: uncomment the code below to expose vega\r\n    (window as any).vega = vega;\r\n    switch (plot.type) {\r\n      case \"vega\":\r\n        if (!plot.thumbnail) {\r\n          // render a thumbnail if there is no thumbnail in the plot object\r\n          new vega.View(vega.parse(plot.data)).initialize().toCanvas().then(canvas =>\r\n            (onThumbnailUpdate(canvas.toDataURL()))\r\n          );\r\n        }\r\n        return (\r\n          <Vega spec={plot.data} className=\"vega-plot\"/>\r\n        );\r\n      case \"vega-lite\":\r\n        if (!plot.thumbnail) {\r\n          new vega.View(vega.parse(compile(plot.data as TopLevelSpec).spec)).initialize().toCanvas().then(canvas =>\r\n            (onThumbnailUpdate(canvas.toDataURL()))\r\n          );\r\n        }\r\n        return (\r\n          <VegaLite spec={plot.data} className=\"vegalite-plot\"/>\r\n        );\r\n        \r\n      case \"image\":\r\n        if (!plot.thumbnail) {\r\n          plot.thumbnail = plot.data.toString();\r\n        }\r\n        return <img src={plot.data} alt=\"Plot\"></img>\r\n      default:\r\n        return <p>Unsupported plot type: {plot.type}</p>\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Plot;\r\n","import React, {Component} from 'react';\r\nimport Thumbnail from './Thumbnail'\r\nimport Plot from './Plot';\r\n\r\nimport './App.css';\r\n\r\nexport type PlotData = {\r\n  type: string,\r\n  data: any,\r\n  thumbnail: string | null,\r\n}\r\n\r\ntype AppState = {\r\n  plots: any[],\r\n  index: number,\r\n}\r\n\r\nexport class App extends Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      plots: [],\r\n      index: 0\r\n    };\r\n    (window as any).addPlot = this.addPlot;\r\n    (window as any).switchTo = this.switchTo;\r\n  }\r\n\r\n  addPlot = (plot: PlotData, noSwitch: Boolean = false) => {\r\n    this.setState((state) => (\r\n      {\r\n        ...state,\r\n        plots: [...state.plots, plot],\r\n      }\r\n    ));\r\n    if (!noSwitch) {\r\n      this.switchTo(this.state.plots.length - 1);\r\n    }\r\n  }\r\n\r\n  switchTo = (index: number) => {\r\n    this.setState((state) => (\r\n      {\r\n        ...state,\r\n        index,\r\n      }\r\n    ));\r\n  }\r\n\r\n  updateThumbnail = (index:number, thumbnailURL:string) => {\r\n    let plots = this.state.plots.slice();\r\n    plots[index].thumbnail = thumbnailURL;\r\n    this.setState((state) => (\r\n      {\r\n        ...state,\r\n        plots: plots,\r\n      }\r\n    ));\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"App\">\r\n      <div className=\"left-panel\">\r\n        {this.state.plots.map((_, index) => <Thumbnail key={index} index={index} thumbnailURL={this.state.plots[index].thumbnail} onClick={()=>{this.switchTo(index)}}  />)}\r\n      </div>\r\n      <div className=\"main-plot\">\r\n        <Plot plot={this.state.plots[this.state.index] ? this.state.plots[this.state.index] : null} onThumbnailUpdate={(thumbnailURL) => this.updateThumbnail(this.state.index, thumbnailURL)}/>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}