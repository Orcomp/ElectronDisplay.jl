{"version":3,"sources":["Thumbnail.tsx","Plot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Thumbnail","index","onClick","thumbnailURL","selected","className","src","alt","Plot","plot","onThumbnailUpdate","onInvalidPlot","window","vega","type","thumbnail","view","View","parse","data","initialize","width","height","toImageURL","then","e","console","warn","Vega","spec","onError","compile","VegaLite","toString","App","props","addPlot","noSwitch","setState","state","plots","switchTo","length","switchToFunc","indexFunc","updateThumbnail","slice","copyListener","event","clipboardData","setData","encodeURI","preventDefault","deleteCurrentPlot","splice","deletePlot","keyDownListener","isComposing","keyCode","_","render","map","key","alert","document","addEventListener","this","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f2c744d.chunk.js","sourcesContent":["import React from 'react';\nimport './Thumbnail.css';\n\nexport type ThumbnailProps = {\n    index: number,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void,\n    thumbnailURL: string | null,\n    selected: boolean,\n}\n\nconst Thumbnail = ({index, onClick, thumbnailURL, selected} : ThumbnailProps) => {\n  return (\n    <div className=\"Thumbnail\" onClick={onClick}>\n      <div className=\"column left\">{index + 1}</div>\n      <div className=\"column right\">\n        {thumbnailURL && <img src={thumbnailURL} className={selected ? \"thumbnail-image-selected\" : \"thumbnail-image\"} alt=\"\" />}\n      </div>\n    </div>\n  );\n}\n\nexport default Thumbnail;\n","import React from 'react';\nimport { Vega, VegaLite } from 'react-vega';\nimport { vega } from 'vega-embed';\nimport { compile, TopLevelSpec } from 'vega-lite';\nimport { PlotData } from './App';\nimport './Plot.css';\n\nexport type PlotProps = {\n    plot: PlotData | null,\n    onThumbnailUpdate: (thumbnailURL: string) => void,\n    onInvalidPlot: (e: Error) => void,\n}\n\nconst Plot = ({plot, onThumbnailUpdate, onInvalidPlot} : PlotProps) => {\n  if (plot) {\n    // For developers: comment/uncomment the code below to hide/expose vega\n    (window as any).vega = vega;\n    switch (plot.type) {\n      case \"vega\":\n        if (!plot.thumbnail) {\n          // render a thumbnail if there is no thumbnail in the plot object\n          try {\n            let view = new vega.View(vega.parse(plot.data)).initialize();\n            if ((view.width() as any) === \"container\" || (view.height() as any) === \"container\") { // The reason that we need to cast both return values to any is that although in function types they return a number, they do return string \"container\" in the case of \"container\" width/height\n              view.width(1000);\n              view.height(500);\n            }\n            view.toImageURL(\"png\").then(onThumbnailUpdate);\n          } catch (e) {\n            console.warn(\"Error generating thumbnail for a vega plot:\", e);\n          }\n        }\n        return (\n          <Vega spec={plot.data} className=\"vega-plot\" onError={onInvalidPlot} />\n        );\n      case \"vega-lite\":\n        if (!plot.thumbnail) {\n          try {\n            let view = new vega.View(vega.parse(compile(plot.data as TopLevelSpec).spec)).initialize();\n            if ((view.width() as any) === \"container\" || (view.height() as any) === \"container\") { // The reason that we need to cast both return values to any is that although in function types they return a number, they do return string \"container\" in the case of \"container\" width/height\n              view.width(1000);\n              view.height(500);\n            }\n            view.toImageURL(\"png\").then(onThumbnailUpdate);\n          } catch (e) {\n            console.warn(\"Error generating thumbnail for a vega-lite plot:\", e);\n          }\n        }\n        return (\n          <VegaLite spec={plot.data} className=\"vegalite-plot\" onError={onInvalidPlot} />\n        );\n        \n      case \"image\":\n        if (!plot.thumbnail) {\n          onThumbnailUpdate(plot.data.toString());\n        }\n        return <img src={plot.data} alt=\"Plot\"></img>\n      default:\n        return <p>Unsupported plot type: {plot.type}</p>\n    }\n  }\n  return null;\n}\n\nexport default Plot;\n","import React, {Component} from 'react';\nimport Thumbnail from './Thumbnail'\nimport Plot from './Plot';\n\nimport './App.css';\n\nexport type PlotData = {\n  type: string,\n  data: any,\n  thumbnail: string | null,\n}\n\ntype AppState = {\n  plots: any[],\n  index: number,\n}\n\nexport class App extends Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      plots: [],\n      index: 0\n    };\n\n    // Expose addPlot and switchTo\n    (window as any).addPlot = this.addPlot;\n    (window as any).switchTo = this.switchTo;\n  }\n\n  addPlot = (plot: PlotData, noSwitch: Boolean = false) => {\n    this.setState((state) => (\n      {\n        ...state,\n        plots: [...state.plots, plot],\n      }\n    ));\n    if (!noSwitch) {\n      this.switchTo(this.state.plots.length - 1);\n    }\n  }\n\n  switchTo = (index: number) => {\n    this.setState((state) => (\n      {\n        ...state,\n        index,\n      }\n    ));\n  }\n\n  switchToFunc = (indexFunc: (oldIndex: number, state: AppState) => number) => {\n    this.setState((state) => {\n        let index = indexFunc(state.index, state);\n        if (index < 0 || index > this.state.plots.length - 1) { // do not switch if it causes out of bounds\n          return state;\n        } else {\n          return {\n            ...state,\n            index,\n          };\n        }\n      }\n    );\n  }\n\n  updateThumbnail = (index:number, thumbnailURL:string) => {\n    this.setState((state) => {\n      let plots = this.state.plots.slice();\n      plots[index].thumbnail = thumbnailURL;\n      \n      return {\n        ...state,\n        plots: plots,\n      }\n    });\n  }\n\n  copyListener = (event: ClipboardEvent) => {\n    if (event.clipboardData) {\n      event.clipboardData.setData('text/html', '<img src=\"' + encodeURI(this.state.plots[this.state.index].thumbnail) + '\" />');\n    }\n    event.preventDefault();\n  };\n\n  deleteCurrentPlot = () => {\n    this.setState((state) => {\n      let plots = state.plots.slice();\n      let index = state.index;\n      plots.splice(state.index, 1);\n      if (!plots[state.index]) {\n        if (plots.length === 0) {\n          index = 0;\n        } else {\n          index = plots.length - 1;\n        }\n      }\n      return {\n        ...state,\n        index,\n        plots,\n      };\n    });\n  };\n\n  deletePlot = (index: number) => {\n    // we delete the invalid plot\n    this.setState((state) => {\n      let plots = state.plots.slice();\n      plots.splice(index, 1);\n      if (!plots[state.index]) {\n        if (plots.length === 0) {\n          index = 0;\n        } else {\n          index = plots.length - 1;\n        }\n      }\n      return {\n        ...state,\n        index,\n        plots,\n      };\n    });\n  };\n\n  keyDownListener = (event: KeyboardEvent) => {\n    if (event.isComposing || event.keyCode === 229) {\n      return;\n    }\n    \n    if (event.keyCode === 40 || event.keyCode === 39) {\n      // arrow down/right\n      \n      // Note that we cannot call switchTo since we are getting old index and writing the index back\n      this.switchToFunc((index) => (index + 1));\n    } else if (event.keyCode === 38 || event.keyCode === 37) {\n      // arrow up/left\n      this.switchToFunc((index) => (index - 1));\n    } else if (event.keyCode === 36) {\n      // home\n      this.switchTo(0);\n    } else if (event.keyCode === 35) {\n      // end\n      this.switchToFunc((_, state) => (state.plots.length - 1));\n    } else if (event.keyCode === 8 || event.keyCode === 46) {\n      // backspace/delete\n      this.deleteCurrentPlot();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('copy', this.copyListener);\n    document.addEventListener('keydown', this.keyDownListener);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('copy', this.copyListener);\n    document.removeEventListener('keydown', this.keyDownListener);\n  }\n\n  render = () => (\n    <div className=\"App\">\n      <div className=\"left-panel\">\n        {this.state.plots.map((_, index) => <Thumbnail key={index} index={index} thumbnailURL={this.state.plots[index].thumbnail} onClick={()=>{this.switchTo(index)}} selected={index===this.state.index} />)}\n      </div>\n      <div className=\"main-plot\">\n        <Plot\n          plot={this.state.plots[this.state.index] ? this.state.plots[this.state.index] : null}\n          onThumbnailUpdate={(thumbnailURL) => this.updateThumbnail(this.state.index, thumbnailURL)}\n          onInvalidPlot={(e: Error) => {\n            alert(\"We encountered the following error while displaying plot \" + (this.state.index + 1) + \": \" + e.toString());\n            this.deletePlot(this.state.index);\n          }}\n        />\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}